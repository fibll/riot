=================================================================
Mögliche Realisierungen
+ Kein Server
-> 1 coap-server, 1 coap-clients
-> Keyboard hängt an Server, Client überprüft Passwort in DB und öffnet Schloss

+ Mit Server
-> 1 coap-server, 1 gnrc-border-router mit schloss, 1 server mit DB anbindung
-> Keyboard an coap-server, gnrc-border-router leitet alle Kommunikation an server weiter, dieser kontrolliert coap anfrage mit passwort und schickt gnrc-border-router dann ob schloss öffnet oder nicht


=================================================================
Projekt aufspielen

+ export BOARD=samr21-xpro && make term // für atmel platinen terminal
+ make // um projekt binaries zu erstellen
+ export BOARD=samr21-xpro && make flash // um atmel platine mit binaries zu flashen



=================================================================
ipv6 Adressen

ATML2127031800009659:
+ 2001:db8::585b:3c24:7705:9eba (...C26B) ORANGE

ATML2127031800009291:
+ 2001:db8::585f:1f1d:d017:47da (...C3DB) YELLOW


Bei aktuellem RIOT (2017.01-branch)
Yellow:
    2001:db8::7b78:1f07:5426:bd9a

Orange:
    2001:db8::7b7c:3c3e:f334:64fa




=================================================================
Funktioniert

+ gnbc_border_router auf ...C26B (ORANGE)
+ gnbc_networking auf ...C3DB (YELLOW)
+ microcoap auf ...C3DB
    -> addr für copper (Firefox):
    coap://[2001:db8::585f:1f1d:d017:47da]:5683/riot/board

"-nicht
+ gnbc_border_router auf ...C26B
+ gnbc_minimal auf ...C3DB


=================================================================
Makefile

The line
   BOARD ?= native
should be replaced with:
   BOARD ?= samr21-xpro

=================================================================
coap-client

Options:
payload option -e
coap-client -e somePayload -m get "coap://[ipv6-adress]:5683/foo"

observe option -s (subscribe) <time_you_want_to_subscribe_in_sec>
coap-client -s 1000 -m get "coap://[ipv6-adress]:5683/foo"


=================================================================
Observe
Für die realisierung müssen 4 Schritte ausgeführt werden. Nachzulesen auf:
https://riot-os.org/api/group__net__gcoap.html#ga3918d03f99a7312946bc28d5fdb7b610

Bei denen für ein observe benötigten resourcen handelt es sich um die schon am Ende von coap_handler.client
definierten resourcen. In den Handlern welche dort angegeben werden, müssen nun die 4 Schritte 
ausgeführt werden.

Im ersten Schritt wird geprüft ob diese Resource überhaupt einen observer hat.
Hier ist noch nicht klar warum bei dem Aufruf der resource per coap-client mit option -s kein
observer eingetragen wird.
Führt man den Aufruf mit der coap Beispiel Seite (coap://californium.eclipse.org:5683/obs) aus, funktioniert die -s option.
$ coap-client -s 20 -m get "coap://californium.eclipse.org:5683/obs"



## Erster Funktionierender Versuch ##
### Setup ###
- Funktion init: Führt 4 Observe Schritte aus, observed resource ist 'obs'
- Funktion obs: Wird observed

### Ablauf ###
Wird per coap die Resource init als erstes aufgerufen, gibt gcoap_obs_init zurück das es keinen Observer gibt für die Resource 'obs'.
Nachdem per coap-client mit der Option -s <Zeit in Sekunden> die Resource obs abgefragt wird, kann nachfolgend mit einer Abfrage von 'init'
erkannt werden das diese Resource nun observed wird. Jedoch ist noch unklar wie alles abläuft.
Des weiteren kann die Resource 'init' keine obsserve-Antwort senden wenn sie nicht auch mit der -s option aufgerufen wird.




=================================================================
Links

https://riot-os.org/api/group__net__gcoap.html#ga3918d03f99a7312946bc28d5fdb7b610
https://tools.ietf.org/pdf/rfc7641.pdf

